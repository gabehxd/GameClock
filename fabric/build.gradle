plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    modImplementation "dev.isxander:yet-another-config-lib:${rootProject.yacl_version}-fabric"
    modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"
    modImplementation("com.terraformersmc:modmenu:${rootProject.modmenu_version}")

    modImplementation "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
}

processResources {
    inputs.property 'version', project.version
    inputs.property 'fabric_loader_version', rootProject.fabric_loader_version
    inputs.property 'minecraft_version', rootProject.minecraft_version
    inputs.property 'architectury_api_version', rootProject.architectury_api_version
    inputs.property 'yacl_version', rootProject.yacl_version

    filesMatching('fabric.mod.json') {
        expand version: project.version,
                fabric_loader_version: fabric_loader_version,
                minecraft_version: minecraft_version,
                architectury_api_version: architectury_api_version,
                yacl_version: yacl_version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
